import argparse
from sys import exit

from tests import testUtils
from tests import testCases

'''
    The Johns Hopkins University Applied Physics Laboratory (JHU/APL)
    
    File Name: dotest.py
    
    Description: This python test script has been written for BPSec. 
    Tests cover bib-integrity and bcb-confidentiality security services
    and test features such as target multiplicity.
    
    For test script details, including how to use the command line arguments
    to run test cases and control output, consult BPSec_Python_Test_Cases document.
'''

def main():

    # Track the total number of tests passed and failed
    testUtils.g_tests_passed = 0
    testUtils.g_tests_failed = 0

    parser = argparse.ArgumentParser()

    parser.add_argument('--test_case', type=int, nargs='+', help="The number(s) identifying the test case(s) to execute. Separate by spaces.")
    parser.add_argument('--test_macro', type=str, help="The test macro to execute. Ex: \'bib\' to execute all BIB related tests.")
    parser.add_argument('--output', type=str, default="default", metavar="default | detailed | verbose", help="Set to \'detailed\' to see a "
        "list of defined security policy rules for each test. \nSet to \'verbose\' to display full info for each policy rule defined.")
    parser.add_argument('--debug', help="Include to display debugging information for tests.", action="store_true")
    
    args = parser.parse_args()

    # Clean up ION from previous runs and start the three test nodes with ION running
    # 1. Any remaining ION logs and/or processes are cleaned up from previous runs. 
    # 2. The set of three nodes needed for testing (ipn:2.1, ipn:3.1, and ipn:4.1) are configured and started. 
    # 3. bpsink is run on node ipn:3.1 and ipn:4.1 with the results generated by the bptrace command being 
    #    written to 3_results.txt and 4_results.txt
    testUtils.clean_ion()
    testUtils.node_setup()

    # Set test verbosity for displaying policy information
    testUtils.g_verbose = args.output

    # Set debug mode if turned on by the user
    if args.debug:
        testUtils.g_debug = True
    else:
        testUtils.g_debug = False

    # Determine ION version to set security context IDs
    vers = testUtils.get_version(2)

    if vers == "ION-OPEN-SOURCE":

        # BPSec default security contexts from RFC 9173 are implemented
        testUtils.BIB_SCID = testUtils.BIB_HMAC_SHA2_SCID
        testUtils.BCB_SCID = testUtils.BCB_AES_GCM_SCID

        print("\nThe tests below will use the following security contexts, unless otherwise noted: \n"
            "\tbib-integrity operations: BIB-HMAC-SHA2\n"
            "\tbcb-confidentiality operations: BCB-AES-GCM\n"
            "As defined in RFC 9173.\n\n"
            "Security contexts do NOT generate cryptographic material in ION Open Source releases.\n"
            "The ION NASA Baseline (INB) generates cryptographic material for these security contexts \n"
            "using the MBEDTLS cipher suites.\n")
                
    elif vers == "ION-NASA-BASELINE":

        # BPSec default security contexts from RFC 9173 are implemented
        # AND generate cryptopgraphic material using MBEDTLS
        testUtils.BIB_SCID = testUtils.BIB_HMAC_SHA2_SCID
        testUtils.BCB_SCID = testUtils.BCB_AES_GCM_SCID

        print("\nThe tests below will use the following security contexts, unless otherwise noted: \n"
            "\tbib-integrity operations: BIB-HMAC-SHA2\n"
            "\tbcb-confidentiality operations: BCB-AES-GCM\n"
            "As defined in RFC 9173.\n")
    else:
        print("Error: ION Version could not be determined.")
        testUtils.stop_and_clean()
        return

    # Perform the test case(s) identified by number
    if args.test_case is not None:
        for case_num in args.test_case:
            testCases.test_dict[case_num]()

    # Execute a test macro, if provided
    if args.test_macro is not None:
        testCases.test_dict[args.test_macro]()


    testUtils.stop_and_clean()

    print("\n###############################################################################")
    print("Test(s) completed.")
    print("\tTest(s) passed: " + str(testUtils.g_tests_passed))
    print("\tTest(s) failed: " + str(testUtils.g_tests_failed))
    print("###############################################################################")

    if testUtils.g_tests_failed != 0:
        exit(1)
    else:
        exit(0)

if __name__ == "__main__":
    main()
