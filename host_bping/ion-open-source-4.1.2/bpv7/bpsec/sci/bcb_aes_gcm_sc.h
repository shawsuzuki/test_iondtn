/******************************************************************************
 **                           COPYRIGHT NOTICE
 **      (c) 2021 The Johns Hopkins University Applied Physics Laboratory
 **                         All rights reserved.
 ******************************************************************************/

/*****************************************************************************
 **
 ** File Name: bcb_aes_gcm_sc.h
 **
 ** Namespace:
 **    bpsec_bagsci_   SCI Interface functions
 **    bpsec_bagscu_  General utilities
 **
 ** Description:
 **
 **     This file implements The BCB-AES-GCM security context standardized
 **     by RFC9173.
 **
 ** Notes:
 **
 **
 ** Assumptions:
 **
 ** Modification History:
 **  MM/DD/YY  AUTHOR         DESCRIPTION
 **  --------  ------------   ---------------------------------------------
 **  08/07/21  E. Birrane     Initial implementation
 *****************************************************************************/


#ifndef _BPSEC_BAGSC_H_
#define _BPSEC_BAGSC_H_

#include "sci.h"
#include "sc_util.h"
#include "bpsec_util.h"
#include "sci_valmap.h"


#define BPSEC_BCB_AES_GCM_SC_ID 2


/*
 * AES Variant - Options and Default Value
 * https://www.rfc-editor.org/rfc/rfc9173.html#name-aes-variant
 */

#define BPSEC_BAGSC_AV_128 (0x1)
#define BPSEC_BAGSC_AV_256 (0x3)

#define BPSEC_BAGSC_AV_DEFAULT BPSEC_BAGSC_AV_256



#define BPSEC_BAGSC_FILENAME "bcb_aes_gcm_tmpfile"
#define BPSEC_BAGSC_MAX_TEMP_FILES_PER_SECOND   5

#define BPSEC_BAGSC_XMIT_RATE 125000

#define BPSEC_BAGSC_MIN_FILE_BUFFER (BPSEC_BAGSC_XMIT_RATE / BPSEC_BAGSC_MAX_TEMP_FILES_PER_SECOND)


/**
 * Security Context Identifiers
 *
 * BIB-HMAC-SHA2 defines three parameters and one result type that
 * can be generated by the context and used to populate security
 * blocks.
 *
 * This enumeration lists these items.
 *
 */
typedef enum
{
    BPSEC_BAGSC_PARM_LTK_NAME    = 5, /** Parm.   The LTK key name to use    */
    BPSEC_BAGSC_PARM_IV          = 1, /** Parm.   The Initialization Vector Used.      */
    BPSEC_BAGSC_PARM_AES_VAR_ID  = 2, /** Parm.   The AES Variant Used.      */
    BPSEC_BAGSC_PARM_WRAPPED_KEY = 3, /** Parm.   The AES-Wrapped key.       */
    BPSEC_BAGSC_PARM_AAD_SCOPE   = 4, /** Parm.   The AAD Scope Flags.       */
    BPSEC_BAGSC_RESULT_TAG       = 1  /** Result. The Expected HMAC.         */
} sc_bag_ids_t;



/* Generic Security Context Interface Functions*/

int           bpsec_bagsci_procInBlk(sc_state *state, AcqWorkArea *wk, BpsecInboundASB *asb, LystElt tgtBlkElt, BpsecInboundTargetResult *tgtResult);
int           bpsec_bagsci_procOutBlk(sc_state *state, Lyst extraParms, Bundle *bundle, BpsecOutboundASB *asb, BpsecOutboundTargetResult *tgtResult);
sc_value_map* bpsec_bagsci_valMapGet();

/* Generic Utilities */
uint8_t*      bpsec_bagscu_computeSignature(BpsecSerializeData aad, Object zcoObj, int zcoLen, int csi_suite, csi_val_t csi_key, csi_svcid_t svc);
int           bpsec_bagscu_inParmsGet(sc_state *state, AcqWorkArea *wk, BpsecInboundTargetResult *tgtResult, csi_cipherparms_t *parms);
int           bpsec_bagscu_outParmsGet(sc_state *state, int suite, Lyst extraParms, Bundle *bundle, BpsecOutboundTargetResult *tgtResult, csi_cipherparms_t *parms);

int           bpsec_bagscu_zcoCompute(uint32_t suite, Object *dataObj, csi_val_t sesKey, csi_cipherparms_t *parms, uint8_t function);



#endif
